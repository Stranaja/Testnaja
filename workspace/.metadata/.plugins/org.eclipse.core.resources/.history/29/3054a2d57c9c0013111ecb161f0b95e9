package net.pozor.renamer.main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;

import org.apache.commons.io.FileUtils;
import org.eclipse.swt.SWT;
import org.eclipse.swt.dnd.DND;
import org.eclipse.swt.dnd.DropTarget;
import org.eclipse.swt.dnd.DropTargetEvent;
import org.eclipse.swt.dnd.DropTargetListener;
import org.eclipse.swt.dnd.FileTransfer;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

public class Renamer
{	
	private static Text inputText;
	
	public static void main(String[] args)
	{		
		Display display = new Display();
		final Shell shell = new Shell(display);
		
		shell.setSize(500, 200);
		shell.setText("Renamer 4 pfSense");
		
		Composite inputComposite = new Composite(shell, SWT.BORDER);
		FormData formDataInput = new FormData();
		formDataInput.top = new FormAttachment(0, 5);
		formDataInput.bottom = new FormAttachment(100, -5);
		formDataInput.left = new FormAttachment(0, 5);
		formDataInput.right = new FormAttachment(100, -5);
		inputComposite.setLayoutData(formDataInput);
		inputComposite.setLayout(new FormLayout());
		
		inputText = new Text(inputComposite, SWT.V_SCROLL);
		FormData formDataInputLabel = new FormData();
		formDataInputLabel.top = new FormAttachment(0, 5);
		formDataInputLabel.bottom = new FormAttachment(100, 0);
		formDataInputLabel.left = new FormAttachment(0, 5);
		formDataInputLabel.right = new FormAttachment(100, 0);
		inputText.setLayoutData(formDataInputLabel);
		inputText.setEditable(false);		
		inputText.setText("Sem zvleci vhodne mape.");
		
		DropTarget dt0 = new DropTarget(inputText, DND.DROP_DEFAULT | DND.DROP_MOVE);
		dt0.setTransfer(new Transfer[] { FileTransfer.getInstance() });
		dt0.addDropListener(new DropTargetListener() {
			
			@Override
			public void dropAccept(DropTargetEvent arg0)
			{
				
			}
			
			@Override
			public void drop(DropTargetEvent arg0)
			{	
				inputText.setText("");
				
				String[] folders = ((String[])arg0.data);
				
				//String[] folders = new String[]{"/Users/albert/test"};
				
				ArrayList<File> outputDirs = new ArrayList<File>();
				
				for (String folder : folders)
				{
					File directory = new File(folder);
					
					if (directory.isDirectory())
					{	
						try
						{
							File outputDir = new File(directory.getParentFile() +
													  File.separator +
													  "upload" +
													  File.separator +
													  directory.getName());
							
							if (outputDir.getParentFile().exists())
							{	
								FileUtils.deleteDirectory(outputDir.getParentFile());
							}
							
							FileUtils.copyDirectory(directory, outputDir);
							
							outputDirs.add(outputDir);
						}
						catch (IOException e)
						{	
							e.printStackTrace();
						}
					}
				}
				
				for (File directory : outputDirs)
				{
					processFile(directory);
				}
				
				inputText.append("======================================================\n\nSem zvleci vhodne mape.");
				
				MessageBox box = new MessageBox(shell, SWT.OK);
				box.setText("Kon��ano");
				box.setMessage("Datoteke so pripravljene.");				
				box.open();
			}
			
			@Override
			public void dragOver(DropTargetEvent arg0)
			{
				
			}
			
			@Override
			public void dragOperationChanged(DropTargetEvent arg0)
			{
				
			}
			
			@Override
			public void dragLeave(DropTargetEvent arg0)
			{
				
			}
			
			@Override
			public void dragEnter(DropTargetEvent arg0)
			{
				
			}
		});
		
		shell.setLayout (new FormLayout());
		shell.open();
		while (!shell.isDisposed()) 
		{
			if (!display.readAndDispatch())
			{
				display.sleep();
			}
		}
		display.dispose();
	}
	
	private static void processFile(File file)
	{
		File[] files = file.listFiles();
		
		for (File f : files)
		{
			if (f.isDirectory())
			{
				processFile(f);
			}
			else
			{
				renameResources(f);
			}
		}
	}
	
	private static void renameResources(File file)
	{	
		if (file.getName().toLowerCase().endsWith(".html") ||
			file.getName().toLowerCase().endsWith(".css"))
		{	
			inputText.append("Obdelujem datoteko " + file.getAbsolutePath() + "...\n\n");
			
			BufferedReader br = null;
			BufferedWriter bw = null;
			
			String tempFileName = file.getAbsolutePath().substring(0, file.getAbsolutePath().lastIndexOf(File.separator)) + File.separator + "temp_" + file.getName(); 
			
			File temp = new File(tempFileName);
			 
			try {
				
				br = new BufferedReader(new FileReader(file));
				
				temp.createNewFile();
				bw = new BufferedWriter(new FileWriter(temp));
	 
				String line;				
				
				while ((line = br.readLine()) != null)
				{	
					String processedLine = line.trim().replaceAll("\\s+", "");
					
					if (processedLine.toLowerCase().contains("retina"))
					{	
					    String[] splitLine = line.split("\\s+");
					    
					    if (splitLine.length > 0)
					    {
						    for (String string : splitLine)
						    {
						    	if (string.replaceAll("\\s+", "").contains("src="))
						    	{
						    		String resourceName = processedLine.split("src=")[1];
						    		
						    		resourceName = resourceName.substring(resourceName.indexOf("\"", 0) + 1, resourceName.indexOf("\"", 1));
						    		
						    		if (! resourceName.trim().toLowerCase().startsWith("captiveportal-"))
						    		{
							    		String replacement = line.replaceAll(resourceName, "captiveportal-" + resourceName);
							    		
							    		appendText(resourceName);
							    		
							    		bw.write(replacement);
							    		bw.newLine();
						    		}
						    	}
						    }
					    }
					}					
					else if (processedLine.toLowerCase().contains("<img") || (processedLine.toLowerCase().contains("text/javascript")) && processedLine.contains("src="))
					{	
					    String[] splitLine = line.split("\\s+");
					    
					    for (String string : splitLine)
					    {
					    	if (string.replaceAll("\\s+", "").contains("src="))
					    	{
					    		String resourceName = processedLine.split("src=")[1];
					    		
					    		resourceName = resourceName.substring(resourceName.indexOf("\"", 0) + 1, resourceName.indexOf("\"", 1));
					    		
					    		if (! resourceName.trim().toLowerCase().startsWith("captiveportal-"))
					    		{
						    		String replacement = line.replaceAll(resourceName, "captiveportal-" + resourceName);
						    		
						    		appendText(resourceName);
						    		
						    		bw.write(replacement);
						    		bw.newLine();
					    		}
					    	}
					    }
					}
					else if (processedLine.toLowerCase().contains("linkrel") && processedLine.toLowerCase().contains("stylesheet"))
					{
						String[] splitLine = line.split("\\s+");
					    
					    for (String string : splitLine)
					    {
					    	if (string.replaceAll("\\s+", "").contains("href="))
					    	{
					    		String resourceName = processedLine.split("href=")[1];
					    		
					    		resourceName = resourceName.substring(resourceName.indexOf("\"", 0) + 1, resourceName.indexOf("\"", 1));
					    		
					    		if (! resourceName.trim().toLowerCase().startsWith("captiveportal-"))
					    		{
						    		String replacement = line.replaceAll(resourceName, "captiveportal-" + resourceName);
						    		
						    		appendText(resourceName);
						    		
						    		bw.write(replacement);
						    		bw.newLine();
					    		}
					    	}
					    }
					}
					else if (processedLine.toLowerCase().contains("url("))
					{	
						String resourceName = processedLine.substring(processedLine.indexOf("url(") + 4, processedLine.indexOf(")"));
						
						if (! resourceName.trim().toLowerCase().startsWith("captiveportal-"))
						{
							String replacement = line.replaceAll(resourceName, "captiveportal-" + resourceName);
							
							appendText(resourceName);
							
							bw.write(replacement);
				    		bw.newLine();
						}
					}
					else
					{	
			    		bw.write(line);
			    		bw.newLine();
					}
				}
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
			finally
			{
				try
				{
					if (br != null)
					{
						br.close();
					}
					if (bw != null)
					{
						bw.close();
					}
				}
				catch (IOException ex)
				{
					ex.printStackTrace();
				}
			}
			
			try
			{
				Files.move(temp.toPath(), file.toPath(), StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING);
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
			// renameTo() NE DELA na Windows.
			//System.out.println(temp.renameTo(file));
			
			inputText.append("\nDatoteka " + "\"" + file.getAbsolutePath() + "\"" + " je obdelana.\n\n");
		}
	}
	
	private static void appendText(String resourceName)
	{
		inputText.append("Zamenjujem " + "\"" + resourceName + "\"" + " s " + "\"" + "captiveportal-" + resourceName + "\"" + " ...\n");
	}
	
}
